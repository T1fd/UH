{
 'Реквизиты': {
  'Наименование': 'Сбор и отправка ошибок из журнала ТЕСТ',
  'ТекстОбработки': '	//------------------------------------------------------------------------------
	//ПАРАМЕТРЫ                                          
	//------------------------------------------------------------------------------
	Отладка = Ложь;   
	
	ДатаНачалаВыгрузки = ТекущаяДата();
	МаксКоличествоДнейЖРНазад = 60;  
	МаксКолвоСобытий = 1000; //не более 1000 событий
	ТемаСообщения = ""+Система+" - ошибки ЖР от "+Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy");  
	
	ПочтаПолучателей = "ssmirnov@t1.ru"; 
	
	ДопПолучатели = ПолучитьЗначениеПеременной(Переменные,"ПолучателиПоСистеме",Система);
	Если ЗначениеЗаполнено(ДопПолучатели) Тогда  
		ПочтаПолучателей = ПочтаПолучателей + ", "+ДопПолучатели;
	КонецЕсли;
	  
	//ПочтаПолучателей = ПочтаПолучателей + ",1csd@t1.ru"; - отключено, так как портит статистику
	 
	ГуидУчетнойЗаписиПочты = "12f1aa09-8983-11ec-96d9-005056015ee4";
	 
    Если Отладка Тогда 
    	ПочтаПолучателей = "ssmirnov@t1.ru";
    КонецЕсли;
	
	СимволПереносаСтроки = Символы.ПС + Символы.ВК;
	ТекстСообщения = "Ошибки ЖР на " + Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy")+" во вложенном файле"+СимволПереносаСтроки+СимволПереносаСтроки+
		"Если в журнале видите лишние события, на которые не нужно обращать внимания, пишите Смирнову Сергею, я отключу их рассылку"+СимволПереносаСтроки+
		"Для отключений событий по пользователю, установите ему в системе признак ""РазработчикАналитик""";

	//произвольные отборы накладываются ниже
	
	//------------------------------------------------------------------------------
	//Сбор ЖР
	//------------------------------------------------------------------------------
	ДанныеПоследнейВыгрузки = ПолучитьДанныеПоследнейВыгрузки(Система,ЗапросСсылка.Ссылка); 
	//ДанныеПоследнейВыгрузки = Новый структура("Дата",\u002720100101\u0027);
	
	ДатаНачала = Макс(ДанныеПоследнейВыгрузки.Дата,НачалоДня(ДатаНачалаВыгрузки)-86400*МаксКоличествоДнейЖРНазад); //не ранее чем за последние X дней  
	COMТЗ_ЖР = Соединение.NewObject("ТаблицаЗначений"); 
	COMСтруктураОтбораЖурнала = Соединение.NewObject("Структура");
	COMСтруктураОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);
	COMСтруктураОтбораЖурнала.Вставить("Уровень",Соединение.УровеньЖурналаРегистрации.Ошибка);
	ИменаКолонок = "Дата,Пользователь,Компьютер,ИмяПриложения,Событие,Комментарий,ПредставлениеДанных,ИмяПользователя,ПредставлениеСобытия,ПредставлениеМетаданных";
	Соединение.ВыгрузитьЖурналРегистрации(COMТЗ_ЖР,COMСтруктураОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);
	  
	//перенести comТЗ в ТЗ
	СтрВнутр = Соединение.ЗначениеВСтрокуВнутр(COMТЗ_ЖР);
	ТЗ_ЖР = ЗначениеИзСтрокиВнутр(СтрВнутр);	
	 		
	//------------------------------------------------------------------------------
	//СКД
	//------------------------------------------------------------------------------
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", ТЗ_ЖР);
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";ИсточникДанных.ТипИсточникаДанных = "Local";     
	
	НаборДанныхЗапросСКД = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); //НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанныхЗапросСКД.Имя = "НаборДанных1";
	//НаборДанныхЗапросСКД.Запрос = ПолучитьЗначениеПеременной(Переменные,"ТекстЗапроса");
	НаборДанныхЗапросСКД.ИмяОбъекта = "ТЗДанные";
	НаборДанныхЗапросСКД.ИсточникДанных = "ИсточникДанных1";
	//НаборДанныхЗапросСКД.АвтоЗаполнениеДоступныхПолей = Истина; //для запроса
		
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл //для ТЗ
		НовоеПоле = НаборДанныхЗапросСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.ТипЗначения = КолонкаТЗ.ТипЗначения; 
		НовоеПоле.Заголовок = КолонкаТЗ.Заголовок;
		НовоеПоле.ПутьКданным = КолонкаТЗ.Имя;
		НовоеПоле.Поле = КолонкаТЗ.Имя; 
		//оформление
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("Размещение",ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота",20);
	КонецЦикла;
	
	//Получить инициализированные настройки	
	ИсточникДоступныхНастроекКомпоновкиДанных = новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	//ТЕСТИРУЕМ ЭТУ СТРОКУ ЕЩЕ РАЗ	
	//настройки вывода
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления","Зеленый");  //БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);

	//ВЫБРАННЫЕ ПОЛЯ
	ГруппировкаКД = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	Для каждого КолонкаТЗ Из ТЗ_ЖР.Колонки Цикл
		НовВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
	КонецЦикла;
	
	
	//сортировка результата
	НовЭлПорядка = ГруппировкаКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовЭлПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата");НовЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
	//------------------------------------------------------------------------------
	//ОТБОРЫ СКД
	//------------------------------------------------------------------------------     
	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"{""S"",""""}"); //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"невозможно изменить в запрещенном периоде");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"невозможно поместить в запрещенный период");		 
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Операция не может быть выполнена из-за несоответствия версии"); 
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Данные были изменены или удалены другим пользователем");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нет товаров, доступных для отгрузки"); //УТ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"по причине:" + Символы.ПС + "Не удалось провести");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Рекомендуется перезапустить исполняющиеся процессы после завершени"); //УХ	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеРавно,"Нет доступных аналитик для расшифровки!");  //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Ошибка совместного доступа к файлу");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нарушение общих настроек доступа при расширении рабочей группы"); //ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Процесс не может получить доступ к файлу, так как этот файл занят другим процессом");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Не требуется вводить счет на оплату на основании документа"); //УТ 
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Пользователь отказался от проверки файла выгрузки платежей в Клиенте банка"); //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"тскКШДТранспортСообщенийОбмена: Нет сообщений для обработки"); //КШД
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"превышает максимально допустимый размер файла"); //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Помещение файла невозможно, повторите попытку позднее"); //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"У текущего пользователя недостаточно прав для отмены согласования"); //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Нет услуг с вариантом оформления"); //УТ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Действие недоступно, так как файл % занят для редактирования");
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Отменить проведение заявок, находящихся на исполнении или уже исполненных, может только суперпользовател"); //УХ
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Требуется записать объект перед отправкой на согласование. Операция отменена."); //УХ	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Требуется ввести комментарий перед утверждением"); //УХ	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Помеченный на удаление документ не может быть проведен!"); //УХ, УТ, ДО	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Не удалось сделать непроведенным"); //УХ, УТ, ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Ошибка доступа к файлу");  //УХ, УТ, ДО  
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеСодержит,"Нет данных для счета-фактуры на аванс или на суммовую разницу");  //УХ  
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Недостаточно прав для выполнения операции с файлом");  //УХ, УТ, ДО
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Документ отправлен на согласование. Добавлять файлы могут только участники согласования");  //ДО
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"У пользователя недостаточно прав для отмены согласования");  //УХ 
    Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Комментарий",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Задачи были выполнены ранее.");  //УХ
	           
	           
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Работа с контрагентами.");  //УХ, УТ, ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеНачинаетсяС,"Электронное взаимодействие");  //УХ, УТ, ДО
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"Преобразование ошибки сервиса в структуру");  //УХ, УТ, ДО	
	Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"Событие",ВидСравненияКомпоновкиДанных.НеРавно,"ПретензионноИсковаяРабота");  //УХ
	
	
		
	//Не выводить ошибки спец пользователей
	ЗапросАдминовCOM = Соединение.NewObject("Запрос"); 
	ЗапросАдминовCOM.Текст = "ВЫБРАТЬ
		|	ПользователиДополнительныеРеквизиты.Ссылка.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|	ИЗ
		|		Справочник.Пользователи.ДополнительныеРеквизиты КАК ПользователиДополнительныеРеквизиты
		|	ГДЕ
		|		ПользователиДополнительныеРеквизиты.Свойство = &ДопСвойство
		|		И ЕСТЬNULL(ПользователиДополнительныеРеквизиты.Значение, ЛОЖЬ) = ИСТИНА";	
	СвойствоРазработчикАналитикCOM = Соединение.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя","РазработчикАналитик"); 
	ЗапросАдминовCOM.УстановитьПараметр("ДопСвойство",СвойствоРазработчикАналитикCOM);   	
	ВыборкаАдминовCOM = ЗапросАдминовCOM.Выполнить().Выбрать();	
	Пока ВыборкаАдминовCOM.Следующий() Цикл
		ТекПользовательИБCOM = Соединение.ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыборкаАдминовCOM.ИдентификаторПользователяИБ);
		Если ТекПользовательИБCOM <> Неопределено Тогда  
			Алгоритм("ДобавитьЭлементОтбора",НастройкиКомпоновки.Отбор,"ИмяПользователя",ВидСравненияКомпоновкиДанных.НеРавно,ТекПользовательИБCOM.Имя);
		КонецЕсли;
	КонецЦикла;
	
		
	//------------------------------------------------------------------------------
	//Формирование и отправка отчета по почте
	//------------------------------------------------------------------------------ 
	
	//Вывести отчет в ТД
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки, , ,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТДРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТДРезультат.ВысотаТаблицы < 2 Тогда
		//нет данных
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - нет данных для отправки"+Символы.ПС;
	Иначе
		//есть данные, отправить в письме 
				
		//через поток в памяти
		ПотокФайла = Новый ПотокВПамяти();
		ТДРезультат.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
		ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
		Вложения = новый Массив;
		Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла));
		Алгоритм("ОтправитьEmail",ЗапросСсылка,ПочтаПолучателей,ТемаСообщения,ТекстСообщения,ТипТекстаПочтовогоСообщения.РазмеченныйТекст,ГуидУчетнойЗаписиПочты,Вложения);
		
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - сообщения отправлены"+Символы.ПС;
	КонецЕсли;	
	
	Если не Отладка Тогда
		УстановитьДатуПоследнейВыгрузки(Система,ЗапросСсылка,ДатаНачалаВыгрузки);
	КонецЕсли;',
  'Комментарий': 'Источник: ТЗ. Вывод: вложение'
 },
 'ТЧ': [
  {
   'Переменные': [
    {
     'Имя': 'старая отправка по почте',
     'Разделитель': null,
     'ЗначениеСтрока': '//Отправка письма  
		ПараметрыПисьма = Новый Структура;   
		
		Кому = Новый Массив;
		ПочтаПолучателей = ОбщегоНазначенияКлиентСервер.АдресаЭлектроннойПочтыИзСтроки(ПочтаПолучателей);
		Для каждого ПочтаПолучателя Из ПочтаПолучателей Цикл
			Кому.Добавить(Новый Структура("Адрес, Представление", ПочтаПолучателя.Адрес, ПочтаПолучателя.Псевдоним));
		КонецЦикла;
		ПараметрыПисьма.Вставить("Кому", Кому);
		
		ПараметрыПисьма.Вставить("Тема", ТемаСообщения);
		ПараметрыПисьма.Вставить("Тело", ТекстСообщения); 
		Вложения = новый Массив;
		Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла));
		ПараметрыПисьма.Вставить("Вложения",Вложения);	
		
				
		//отправка
		//УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
		УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПолучитьСсылку(Новый УникальныйИдентификатор(ГуидУчетнойЗаписиПочты));
		
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(УчетнаяЗапись, ПараметрыПисьма);
		РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(УчетнаяЗапись, Письмо);
		//РаботаСПочтовымиСообщениямиПереопределяемый.ПослеОтправкиПисьма(ПараметрыПисьма);
		
		ЗаписьЖурналаРегистрации("Т1_ОтправкаПисем",УровеньЖурналаРегистрации.Информация,,ЗапросСсылка,"Отправлено письмо "+ТемаСообщения);
		
		//ошибки отправки
		Для каждого КлючИЗначениеСоответствия из РезультатОтправки.ОшибочныеПолучатели Цикл
			АдресПолучателя = КлючИЗначениеСоответствия.Ключ;
			ТекстОшибки = ""+КлючИЗначениеСоответствия.Значение;
			ЗаписьЖурналаРегистрации("Т1_ОтправкаПисем",УровеньЖурналаРегистрации.Ошибка,,ЗапросСсылка,""+АдресПолучателя+" - "+ТекстОшибки);
		КонецЦикла;',
     'Комментарий': ''
    },
    {
     'Имя': 'ПолучателиПоСистеме',
     'Разделитель': 'e1cib/data/Справочник.Т1_ИнформационныеБазы?ref=96d8005056015ee411ec47a45a795e98',
     'ЗначениеСтрока': 'dpopov@t1.ru',
     'Комментарий': ''
    },
    {
     'Имя': 'ПолучателиПоСистеме',
     'Разделитель': 'e1cib/data/Справочник.Т1_ИнформационныеБазы?ref=96d8005056015ee411ec486f824da928',
     'ЗначениеСтрока': 'gmamporiya@t1.ru',
     'Комментарий': ''
    },
    {
     'Имя': 'ПолучателиПоСистеме',
     'Разделитель': 'e1cib/data/Справочник.Т1_ИнформационныеБазы?ref=96d4005056015ee411ec0cf914748d7f',
     'ЗначениеСтрока': 'nneusypova@t1.ru',
     'Комментарий': ''
    }
   ]
  }
 ]
}
