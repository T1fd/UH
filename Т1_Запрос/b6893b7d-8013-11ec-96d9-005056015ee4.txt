{
 'Реквизиты': {
  'Наименование': 'Оповещение об изменении привилегированных пользователей из журнала',
  'ТекстОбработки': '	//------------------------------------------------------------------------------
	//ПАРАМЕТРЫ                                          
	//------------------------------------------------------------------------------
	Отладка = Ложь;   
	
	ДатаНачалаВыгрузки = ТекущаяДата();
	МаксКоличествоДнейЖРНазад = 60;  
	МаксКолвоСобытий = 1000; //не более 1000 событий
	ТемаСообщения = "" + Система + " - изменение привилегированных пользователей ЖР от " + Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy");
	ПочтаПолучателей = "ssmirnov@t1.ru";
    Если Отладка Тогда 
    	ПочтаПолучателей = "averzhbitskiy@t1.ru";
    КонецЕсли;
	
	ГуидУчетнойЗаписиПочты = "12f1aa09-8983-11ec-96d9-005056015ee4";

	
	СимволПереносаСтроки = Символы.ПС + Символы.ВК;
	ТекстСообщения = "Изменение привилегированных пользователей ЖР на " + Формат(ДатаНачалаВыгрузки,"ДФ=dd.MM.yyyy")+" во вложенном файле";

	//произвольные отборы накладываются ниже
	
	//------------------------------------------------------------------------------
	//Сбор ЖР
	//------------------------------------------------------------------------------
	ДанныеПоследнейВыгрузки = ПолучитьДанныеПоследнейВыгрузки(Система, ЗапросСсылка.Ссылка); 
	МассивПриложений = Новый Массив;
	МассивПриложений.Добавить("WebClient");
	МассивПриложений.Добавить("1CV8C");   
	МассивПриложений.Добавить("1CV8");   
	МассивПриложений.Добавить("Designer");   
	
	ДатаНачала = Макс(ДанныеПоследнейВыгрузки.Дата,НачалоДня(ДатаНачалаВыгрузки) - 86400 * МаксКоличествоДнейЖРНазад); //не ранее чем за последние X дней
	ТЗ_ЖР_БезТипов = Новый ТаблицаЗначений; 
	ОтбораЖурнала = Новый Структура;
	ОтбораЖурнала.Вставить("ДатаНачала",ДатаНачала);     
	ОтбораЖурнала.Вставить("ИмяПриложения",МассивПриложений);  
	ОтбораЖурнала.Вставить("Событие", "_$User$_.Update");
	ИменаКолонок = "Дата, Компьютер, ИмяПриложения, Пользователь, ИмяПользователя, Данные";
	ВыгрузитьЖурналРегистрации(ТЗ_ЖР_БезТипов,ОтбораЖурнала,ИменаКолонок,,МаксКолвоСобытий);

	//------------------------------------------------------------------------------
	//Переносим данные из ТЗ без типов и структуры в колоки типизированный ТЗ
	//------------------------------------------------------------------------------
	ТЗ_ЖР = Новый ТаблицаЗначений; 
	ТЗ_ЖР.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТЗ_ЖР.Колонки.Добавить("Компьютер", Новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(50)));
	ТЗ_ЖР.Колонки.Добавить("ИмяПриложения", Новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(20)));
	ТЗ_ЖР.Колонки.Добавить("Пользователь", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТЗ_ЖР.Колонки.Добавить("ИмяПользователя", Новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(100)));
	ТЗ_ЖР.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(100)));
	ТЗ_ЖР.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(100)));
	ТЗ_ЖР.Колонки.Добавить("АутентификацияСтандартная", Новый ОписаниеТипов("Булево"));
	ТЗ_ЖР.Колонки.Добавить("ПарольИзменен", Новый ОписаниеТипов("Булево"));
	ТЗ_ЖР.Колонки.Добавить("ПарольУстановлен", Новый ОписаниеТипов("Булево"));
	ТЗ_ЖР.Колонки.Добавить("ПользовательОС", Новый ОписаниеТипов("Строка",,новый КвалификаторыСтроки(100)));

	Для каждого СтрЖР_БезТипов Из ТЗ_ЖР_БезТипов Цикл 
		СтрЖР = ТЗ_ЖР.Добавить();
		ЗаполнитьЗначенияСвойств(СтрЖР, СтрЖР_БезТипов); 
		ЗаполнитьЗначенияСвойств(СтрЖР, СтрЖР_БезТипов.Данные); 
	КонецЦикла;
	
	//------------------------------------------------------------------------------
	//Формируем запрос 
	//------------------------------------------------------------------------------
	Запрос = Новый Запрос;
	ГруппаНастройкиПравПользователей = Т1_ОбщегоНазначенияСервер.ПолучитьСсылкуИзНавигационной("e1cib/data/Справочник.ГруппыДоступа?ref=96d8005056015ee411ec51007cef0a6c"); //(Т1) Настройка прав пользователей
	Запрос.УстановитьПараметр("Ссылка", ГруппаНастройкиПравПользователей);   	
	Запрос.УстановитьПараметр("ВТ_ЖР", ТЗ_ЖР);   	

	Запрос.Текст = "ВЫБРАТЬ
	|	ВТ_ЖР.Дата КАК Дата,
	|	ВТ_ЖР.Компьютер КАК Компьютер,
	|	ВТ_ЖР.ИмяПриложения КАК ИмяПриложения,
	|	ВТ_ЖР.Пользователь КАК Пользователь,
	|	ВТ_ЖР.ИмяПользователя КАК ИмяПользователя,
	|	ВТ_ЖР.Имя КАК Имя,
	|	ВТ_ЖР.ПолноеИмя КАК ПолноеИмя,
	|	ВТ_ЖР.АутентификацияСтандартная КАК АутентификацияСтандартная,
	|	ВТ_ЖР.ПарольИзменен КАК ПарольИзменен,
	|	ВТ_ЖР.ПарольУстановлен КАК ПарольУстановлен,
	|	ВТ_ЖР.ПользовательОС КАК ПользовательОС
	|ПОМЕСТИТЬ ВТ_ЖР
	|ИЗ
	|	&ВТ_ЖР КАК ВТ_ЖР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ПривилигерованныеПользователи
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка = &Ссылка
	|	И ГруппыДоступаПользователи.Пользователь ССЫЛКА Справочник.Пользователи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобытияСПривязкойКПользователям.Дата КАК Дата,
	|	СобытияСПривязкойКПользователям.Компьютер КАК Компьютер,
	|	СобытияСПривязкойКПользователям.ИмяПриложения КАК ИмяПриложения,
	|	СобытияСПривязкойКПользователям.ИмяПользователя КАК ИмяПользователя,
	|	СобытияСПривязкойКПользователям.Имя КАК ИзмененныйПользовательИмя,
	|	СобытияСПривязкойКПользователям.ПолноеИмя КАК ИзмененныйПользовательПолноеИмя,
	|	СобытияСПривязкойКПользователям.АутентификацияСтандартная КАК АутентификацияСтандартная,
	|	СобытияСПривязкойКПользователям.ПарольИзменен КАК ПарольИзменен,
	|	СобытияСПривязкойКПользователям.ПарольУстановлен КАК ПарольУстановлен,
	|	СобытияСПривязкойКПользователям.ПользовательОС КАК ПользовательОС,
	|	ВЫБОР КОГДА СобытияСПривязкойКПользователям.ИзмененныйПользователь ЕСТЬ NULL
	|		ТОГДА ""не найден пользователь""
	|	КОГДА НЕ ИзмененныеПривилигерованныеПользователи.Пользователь ЕСТЬ NULL
	|		ТОГДА ""изменение привилегированного пользователя""
	|	ИНАЧЕ ""не идентифицирована""
	|	КОНЕЦ КАК ТипОшибки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_ЖР.Дата КАК Дата,
	|		ВТ_ЖР.Компьютер КАК Компьютер,
	|		ВТ_ЖР.ИмяПриложения КАК ИмяПриложения,
	|		Пользователи.Ссылка КАК ИнициаторПользователь,
	|		ВТ_ЖР.ИмяПользователя КАК ИмяПользователя,
	|		ПользователиИзмененные.Ссылка КАК ИзмененныйПользователь,
	|		ВТ_ЖР.Имя КАК Имя,
	|		ВТ_ЖР.ПолноеИмя КАК ПолноеИмя,
	|		ВТ_ЖР.АутентификацияСтандартная КАК АутентификацияСтандартная,
	|		ВТ_ЖР.ПарольИзменен КАК ПарольИзменен,
	|		ВТ_ЖР.ПарольУстановлен КАК ПарольУстановлен,
	|		ВТ_ЖР.ПользовательОС КАК ПользовательОС
	|	ИЗ
	|		ВТ_ЖР КАК ВТ_ЖР
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ПО ВТ_ЖР.Пользователь = Пользователи.ИдентификаторПользователяИБ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиИзмененные
	|			ПО (ВТ_ЖР.Имя = ПользователиИзмененные.Наименование
	|					ИЛИ ВТ_ЖР.ПолноеИмя = ПользователиИзмененные.Наименование)) КАК СобытияСПривязкойКПользователям
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПривилигерованныеПользователи КАК ПривилигерованныеПользователи
	|		ПО (СобытияСПривязкойКПользователям.ИнициаторПользователь = ПривилигерованныеПользователи.Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПривилигерованныеПользователи КАК ИзмененныеПривилигерованныеПользователи
	|		ПО (СобытияСПривязкойКПользователям.ИзмененныйПользователь = ИзмененныеПривилигерованныеПользователи.Пользователь)
	|ГДЕ
	|	ПривилигерованныеПользователи.Пользователь ЕСТЬ NULL
	|			И (НЕ ИзмененныеПривилигерованныеПользователи.Пользователь ЕСТЬ NULL
	|				ИЛИ СобытияСПривязкойКПользователям.ИзмененныйПользователь ЕСТЬ NULL)";
	Данные = Запрос.Выполнить().Выгрузить();

	//------------------------------------------------------------------------------
	//СКД
	//------------------------------------------------------------------------------
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные", Данные);
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";ИсточникДанных.ТипИсточникаДанных = "Local";     
	
	НаборДанныхЗапросСКД = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных")); //НаборДанныхЗапросСхемыКомпоновкиДанных
	НаборДанныхЗапросСКД.Имя = "НаборДанных1";
	НаборДанныхЗапросСКД.ИмяОбъекта = "ТЗДанные";
	НаборДанныхЗапросСКД.ИсточникДанных = "ИсточникДанных1";
		
	Для каждого КолонкаТЗ Из Данные.Колонки Цикл //для ТЗ
		НовоеПоле = НаборДанныхЗапросСКД.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.ТипЗначения = КолонкаТЗ.ТипЗначения; 
		НовоеПоле.Заголовок = КолонкаТЗ.Заголовок;
		НовоеПоле.ПутьКданным = КолонкаТЗ.Имя;
		НовоеПоле.Поле = КолонкаТЗ.Имя; 
		//оформление
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("Размещение",ТипРазмещенияТекстаКомпоновкиДанных.Переносить);
		НовоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота",20);
	КонецЦикла;
	
	//Получить инициализированные настройки	
	ИсточникДоступныхНастроекКомпоновкиДанных = новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроек = новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
		
	//настройки вывода
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("МакетОформления","Зеленый");  //БиблиотекаМакетовОформленияКомпоновкиДанных.Зеленый
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиКомпоновки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор",ТипВыводаТекстаКомпоновкиДанных.НеВыводить);

	//ВЫБРАННЫЕ ПОЛЯ
	ГруппировкаКД = НастройкиКомпоновки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	АвтоВыбранноеПолеКомпоновкиДанных = ГруппировкаКД.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));	
	Для каждого КолонкаТЗ Из Данные.Колонки Цикл
		НовВыбранноеПоле = НастройкиКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТЗ.Имя);
	КонецЦикла;
	
	//сортировка результата
	НовЭлПорядка = ГруппировкаКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовЭлПорядка.Поле = Новый ПолеКомпоновкиДанных("Дата");
	НовЭлПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
	//------------------------------------------------------------------------------
	//Формирование и отправка отчета по почте
	//------------------------------------------------------------------------------ 
	
	//Вывести отчет в ТД
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,НастройкиКомпоновки, , ,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ТДРезультат = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ТДРезультат.ВысотаТаблицы < 2 Тогда
		//нет данных
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - нет данных для отправки"+Символы.ПС;
	Иначе
		//есть данные, отправить в письме 
		
		//через поток в памяти
		ПотокФайла = Новый ПотокВПамяти();
		ТДРезультат.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.XLSX);
		ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
		Вложения = новый Массив;
		Вложения.Добавить(Новый структура("Представление,АдресВоВременномХранилище",ТемаСообщения+".xlsx",ДвоичныеДанныеФайла));
		Алгоритм("ОтправитьEmail",ЗапросСсылка,ПочтаПолучателей,ТемаСообщения,ТекстСообщения,ТипТекстаПочтовогоСообщения.РазмеченныйТекст,ГуидУчетнойЗаписиПочты,Вложения);
		СтрокаОшибок = СтрокаОшибок + ""+Система+" - сообщения отправлены"+Символы.ПС;
	КонецЕсли;	
	
	Если не Отладка Тогда
		УстановитьДатуПоследнейВыгрузки(Система, ЗапросСсылка, ДатаНачалаВыгрузки);
	КонецЕсли;',
  'Комментарий': 'отправляет события из ЖР, когда пользователь без привилегированных прав (по настройке дсотупов) меняет пользователя с привилегированными правами.
Обычно это делается чтобы запустить систему под чужим пользователем, чтобы увеличить себе права.

Источник: ТЗ. Вывод: вложение'
 },
 'ТЧ': [
  {
   'Переменные': []
  }
 ]
}
